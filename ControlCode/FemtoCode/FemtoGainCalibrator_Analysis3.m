%{ 

NOTE: This file is conceptually the same as [...]_Analysis, this one is
just for a different set of data.

 FemtoGainCalibrator_Analysis
 Code for computing the Gain factor for the Femto Photodiode
 - Analyzes data generated by FemtoGainCalibrator.m script.
 Process:
 - Load data, subtract biases
 - Display data so user can pick the best sample for every gain
 - Do linear fit to get slope for each gain
 - Compute all gain ratios
 - Compute average gain factor, STD, and error.
%}

close all; clear all;

%% Load the data
%-- Load .mat files with power-gain measurements
samp1 = load('/media/Data_Drive/VFN/TestbedData/210428_COV8/GainCalibration_onSuperKEXT_Sample1');
samp2 = load('/media/Data_Drive/VFN/TestbedData/210428_COV8/GainCalibration_onSuperKEXT_Sample2');
samp3 = load('/media/Data_Drive/VFN/TestbedData/210428_COV8/GainCalibration_onSuperKEXT_Sample3');
samp4 = load('/media/Data_Drive/VFN/TestbedData/210428_COV8/GainCalibration_onSuperKEXT_Sample4');
samp5 = load('/media/Data_Drive/VFN/TestbedData/210428_COV8/GainCalibration_onSuperKEXT_Sample5');
samp6 = load('/media/Data_Drive/VFN/TestbedData/210428_COV8/GainCalibration_onSuperKEXT_Sample6');

%-- Manually enter biases -- must be a ROW vector if columns in data
% matrices correspond to different gain settings
biases = [0.007437, 0.008055, 0.008114, 0.008464, 0.008707, 0.008599, 0.010616];

%% Bias subtract
% Use the fact that matlab automatically extends "compatible" matrices so
% we don't need to expand the biases vector
samp1.FMTOmeas = samp1.FMTOmeas - biases;
samp2.FMTOmeas = samp2.FMTOmeas - biases;
samp3.FMTOmeas = samp3.FMTOmeas - biases;
samp4.FMTOmeas = samp4.FMTOmeas - biases;
samp5.FMTOmeas = samp5.FMTOmeas - biases;
samp6.FMTOmeas = samp6.FMTOmeas - biases;

%% Plot the Data
% Make plots of the measurements at each gain setting to see which data
    %is the best to use for each gain setting
    
% Define linewidth to use for the plots (purely a display thing)
lw = 1;

%-- Gain setting 5:
  % This plot shows that the samp1 data for gain 1 is incredibly linear and
  % samples a wide range of voltages. Use this for the gain 1 value
gain = 1;
figure();
plot(samp1.PMmeas(:,gain)*1e3, samp1.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
hold on
plot(samp2.PMmeas(:,gain)*1e3, samp2.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp3.PMmeas(:,gain)*1e3, samp3.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp4.PMmeas(:,gain)*1e3, samp4.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp5.PMmeas(:,gain)*1e3, samp5.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp6.PMmeas(:,gain)*1e3, samp6.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
legend({'Samp1', 'Samp2', 'Samp3', 'Samp4', 'Samp5', 'Samp6'}, 'Location', 'southeast')
title(sprintf('superK - Gain = %d',gain+4))
xlabel('redPM Power [mW]')
ylabel('Femto Power [V]')
% Save the chosen data for easy access
gain5_fmto = samp1.FMTOmeas(:,gain);
gain5_pm = samp1.PMmeas(:,gain);


%-- Gain setting 6:
  % This plot shows that the samp1, 2, and 3 for gain 2 are all incredibly 
  % linear. Samp1 has a complete set of data while having the highest
  % voltages. Voltages could be higher (only go up to 2V) but good enough.
gain = 2;
figure();
plot(samp1.PMmeas(:,gain)*1e3, samp1.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
hold on
plot(samp2.PMmeas(:,gain)*1e3, samp2.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp3.PMmeas(:,gain)*1e3, samp3.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp4.PMmeas(:,gain)*1e3, samp4.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp5.PMmeas(:,gain)*1e3, samp5.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp6.PMmeas(:,gain)*1e3, samp6.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
legend({'Samp1', 'Samp2', 'Samp3', 'Samp4', 'Samp5', 'Samp6'}, 'Location', 'southeast')
title(sprintf('superK - Gain = %d',gain+4))
xlabel('redPM Power [mW]')
ylabel('Femto Power [V]')
% Save the chosen data for easy access
gain6_fmto = samp1.FMTOmeas(:,gain);
gain6_pm = samp1.PMmeas(:,gain);

%-- Gain setting 7:
  % This plot shows that the samp1, 2, 3, and 4 for gain 3 are all incredibly 
  % linear. Samp2 is the first with a full set of data (no sats) so use that
gain = 3;
figure();
plot(samp1.PMmeas(:,gain)*1e3, samp1.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
hold on
plot(samp2.PMmeas(:,gain)*1e3, samp2.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp3.PMmeas(:,gain)*1e3, samp3.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp4.PMmeas(:,gain)*1e3, samp4.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp5.PMmeas(:,gain)*1e3, samp5.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp6.PMmeas(:,gain)*1e3, samp6.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
legend({'Samp1', 'Samp2', 'Samp3', 'Samp4', 'Samp5', 'Samp6'}, 'Location', 'southeast')
title(sprintf('superK - Gain = %d',gain+4))
xlabel('redPM Power [mW]')
ylabel('Femto Power [V]')
% Save the chosen data for easy access
gain7_fmto = samp2.FMTOmeas(:,gain);
gain7_pm = samp2.PMmeas(:,gain);

%-- Gain setting 8:
  % Linearity is great as usual. Samp2 is missing some points. Samp3 has
  % many good points and at good voltages. 
gain = 4;
figure();
plot(samp1.PMmeas(:,gain)*1e3, samp1.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
hold on
plot(samp2.PMmeas(:,gain)*1e3, samp2.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp3.PMmeas(:,gain)*1e3, samp3.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp4.PMmeas(:,gain)*1e3, samp4.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp5.PMmeas(:,gain)*1e3, samp5.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp6.PMmeas(:,gain)*1e3, samp6.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
legend({'Samp1', 'Samp2', 'Samp3', 'Samp4', 'Samp5', 'Samp6'}, 'Location', 'southeast')
title(sprintf('superK - Gain = %d',gain+4))
xlabel('redPM Power [mW]')
ylabel('Femto Power [V]')
% Save the chosen data for easy access
gain8_fmto = samp3.FMTOmeas(:,gain);
gain8_pm = samp3.PMmeas(:,gain);

%-- Gain setting 9:
  % Linearity is great as usual. Samp4 has an almost full set of data and
  % values are solidly between 1 and 10.
gain = 5;
figure();
plot(samp1.PMmeas(:,gain)*1e3, samp1.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
hold on
plot(samp2.PMmeas(:,gain)*1e3, samp2.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp3.PMmeas(:,gain)*1e3, samp3.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp4.PMmeas(:,gain)*1e3, samp4.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp5.PMmeas(:,gain)*1e3, samp5.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp6.PMmeas(:,gain)*1e3, samp6.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
legend({'Samp1', 'Samp2', 'Samp3', 'Samp4', 'Samp5', 'Samp6'}, 'Location', 'southeast')
title(sprintf('superK - Gain = %d',gain+4))
xlabel('redPM Power [mW]')
ylabel('Femto Power [V]')
% Save the chosen data for easy access
gain9_fmto = samp4.FMTOmeas(:,gain);
gain9_pm = samp4.PMmeas(:,gain);

%-- Gain setting 10:
  % Samp4 only has 2 valid points. Samp5 has a full set. Values are a bit
  % lower than ideal (they're between 0.1 and 0.9) but they're very linear
  % and should be good enough.
gain = 6;
figure();
plot(samp1.PMmeas(:,gain)*1e3, samp1.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
hold on
plot(samp2.PMmeas(:,gain)*1e3, samp2.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp3.PMmeas(:,gain)*1e3, samp3.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp4.PMmeas(:,gain)*1e3, samp4.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp5.PMmeas(:,gain)*1e3, samp5.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp6.PMmeas(:,gain)*1e3, samp6.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
legend({'Samp1', 'Samp2', 'Samp3', 'Samp4', 'Samp5', 'Samp6'}, 'Location', 'southeast')
title(sprintf('superK - Gain = %d',gain+4))
xlabel('redPM Power [mW]')
ylabel('Femto Power [V]')
% Save the chosen data for easy access
gain10_fmto = samp5.FMTOmeas(:,gain);
gain10_pm = samp5.PMmeas(:,gain);

%-- Gain setting 11:
  % Only Samp5 has any valid points. The data is very nicely linear and
  % well within the 1-10 range we'd like.
gain = 7;
figure();
plot(samp1.PMmeas(:,gain)*1e3, samp1.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
hold on
plot(samp2.PMmeas(:,gain)*1e3, samp2.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp3.PMmeas(:,gain)*1e3, samp3.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp4.PMmeas(:,gain)*1e3, samp4.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp5.PMmeas(:,gain)*1e3, samp5.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
plot(samp6.PMmeas(:,gain)*1e3, samp6.FMTOmeas(:,gain), '-o', 'LineWidth', lw)
legend({'Samp1', 'Samp2', 'Samp3', 'Samp4', 'Samp5', 'Samp6'}, 'Location', 'southeast')
title(sprintf('superK - Gain = %d',gain+4))
xlabel('redPM Power [mW]')
ylabel('Femto Power [V]')
% Save the chosen data for easy access
gain11_fmto = samp6.FMTOmeas(:,gain);
gain11_pm = samp6.PMmeas(:,gain);

%% Display the chosen representative data
% Note: due to the large X-range on this plot, it's hard to see all the
% data at once. However, if you zoom and move around, it becomes very
% clear that the slope of the lines increases with gain.
figure();
plot(gain5_pm*1e3, gain5_fmto, '-o', 'LineWidth', lw)
hold on
plot(gain6_pm*1e3, gain6_fmto, '-o', 'LineWidth', lw)
plot(gain7_pm*1e3, gain7_fmto, '-o', 'LineWidth', lw)
plot(gain8_pm*1e3, gain8_fmto, '-o', 'LineWidth', lw)
plot(gain9_pm*1e3, gain9_fmto, '-o', 'LineWidth', lw)
plot(gain10_pm*1e3, gain10_fmto, '-o', 'LineWidth', lw)
plot(gain11_pm*1e3, gain11_fmto, '-o', 'LineWidth', lw)
legend({'Gain 5', 'Gain 6', 'Gain 7', 'Gain 8', 'Gain 9', 'Gain 10', 'Gain 11'})
title('Data for each gain')
xlabel('redPM Power [mW]')
ylabel('Femto Power [V]')

%% Drop any values where there are nans
gain5_pm = gain5_pm(~isnan(gain5_pm));
gain5_fmto = gain5_fmto(~isnan(gain5_pm));

gain6_pm = gain6_pm(~isnan(gain6_pm));
gain6_fmto = gain6_fmto(~isnan(gain6_pm));

gain7_pm = gain7_pm(~isnan(gain7_pm));
gain7_fmto = gain7_fmto(~isnan(gain7_pm));

gain8_pm = gain8_pm(~isnan(gain8_pm));
gain8_fmto = gain8_fmto(~isnan(gain8_pm));

gain9_pm = gain9_pm(~isnan(gain9_pm));
gain9_fmto = gain9_fmto(~isnan(gain9_pm));

gain10_pm = gain10_pm(~isnan(gain10_pm));
gain10_fmto = gain10_fmto(~isnan(gain10_pm));

gain11_pm = gain11_pm(~isnan(gain11_pm));
gain11_fmto = gain11_fmto(~isnan(gain11_pm));
%% Do linear fits to the data to get the slopes

%-- Fit for gain 5
% Get the coefficients
gain5_cof = polyfit(gain5_pm,gain5_fmto,1);
% Display evaluated equation y = m*x + b
fprintf('Gain5 fit: y = (%f)*x %+f\n',gain5_cof(1),gain5_cof(2))
% Compute R^2 value
gain5_fit = polyval(gain5_cof, gain5_pm); % Estimated  Regression Line
SStot = sum((gain5_fmto-mean(gain5_fmto)).^2);  % Total Sum-Of-Squares
SSres = sum((gain5_fmto-gain5_fit).^2);         % Residual Sum-Of-Squares
gain5_Rsq = 1-SSres/SStot;                      % R^2
fprintf('    R^2: %f\n', gain5_Rsq)

%-- Fit for gain 6
% Get the coefficients
gain6_cof = polyfit(gain6_pm,gain6_fmto,1);
% Display evaluated equation y = m*x + b
fprintf('Gain6 fit: y = (%f)*x %+f\n',gain6_cof(1),gain6_cof(2))
% Compute R^2 value
gain6_fit = polyval(gain6_cof, gain6_pm); % Estimated  Regression Line
SStot = sum((gain6_fmto-mean(gain6_fmto)).^2);  % Total Sum-Of-Squares
SSres = sum((gain6_fmto-gain6_fit).^2);         % Residual Sum-Of-Squares
gain6_Rsq = 1-SSres/SStot;                      % R^2
fprintf('    R^2: %f\n', gain6_Rsq)

%-- Fit for gain 7
% Get the coefficients
gain7_cof = polyfit(gain7_pm,gain7_fmto,1);
% Display evaluated equation y = m*x + b
fprintf('Gain7 fit: y = (%f)*x %+f\n',gain7_cof(1),gain7_cof(2))
% Compute R^2 value
gain7_fit = polyval(gain7_cof, gain7_pm); % Estimated  Regression Line
SStot = sum((gain7_fmto-mean(gain7_fmto)).^2);  % Total Sum-Of-Squares
SSres = sum((gain7_fmto-gain7_fit).^2);         % Residual Sum-Of-Squares
gain7_Rsq = 1-SSres/SStot;                      % R^2
fprintf('    R^2: %f\n', gain7_Rsq)

%-- Fit for gain 8
% Get the coefficients
gain8_cof = polyfit(gain8_pm,gain8_fmto,1);
% Display evaluated equation y = m*x + b
fprintf('Gain8 fit: y = (%f)*x %+f\n',gain8_cof(1),gain8_cof(2))
% Compute R^2 value
gain8_fit = polyval(gain8_cof, gain8_pm); % Estimated  Regression Line
SStot = sum((gain8_fmto-mean(gain8_fmto)).^2);  % Total Sum-Of-Squares
SSres = sum((gain8_fmto-gain8_fit).^2);         % Residual Sum-Of-Squares
gain8_Rsq = 1-SSres/SStot;                      % R^2
fprintf('    R^2: %f\n', gain8_Rsq)

%-- Fit for gain 9
% Get the coefficients
gain9_cof = polyfit(gain9_pm,gain9_fmto,1);
% Display evaluated equation y = m*x + b
fprintf('Gain9 fit: y = (%f)*x %+f\n',gain9_cof(1),gain9_cof(2))
% Compute R^2 value
gain9_fit = polyval(gain9_cof, gain9_pm); % Estimated  Regression Line
SStot = sum((gain9_fmto-mean(gain9_fmto)).^2);  % Total Sum-Of-Squares
SSres = sum((gain9_fmto-gain9_fit).^2);         % Residual Sum-Of-Squares
gain9_Rsq = 1-SSres/SStot;                      % R^2
fprintf('    R^2: %f\n', gain9_Rsq)

%-- Fit for gain 10
% Get the coefficients
gain10_cof = polyfit(gain10_pm,gain10_fmto,1);
% Display evaluated equation y = m*x + b
fprintf('Gain10 fit: y = (%f)*x %+f\n',gain10_cof(1),gain10_cof(2))
% Compute R^2 value
gain10_fit = polyval(gain10_cof, gain10_pm); % Estimated  Regression Line
SStot = sum((gain10_fmto-mean(gain10_fmto)).^2);  % Total Sum-Of-Squares
SSres = sum((gain10_fmto-gain10_fit).^2);         % Residual Sum-Of-Squares
gain10_Rsq = 1-SSres/SStot;                      % R^2
fprintf('    R^2: %f\n', gain10_Rsq)

%-- Fit for gain 11
% Get the coefficients
gain11_cof = polyfit(gain11_pm,gain11_fmto,1);
% Display evaluated equation y = m*x + b
fprintf('Gain11 fit: y = (%f)*x %+f\n',gain11_cof(1),gain11_cof(2))
% Compute R^2 value
gain11_fit = polyval(gain11_cof, gain11_pm); % Estimated  Regression Line
SStot = sum((gain11_fmto-mean(gain11_fmto)).^2);  % Total Sum-Of-Squares
SSres = sum((gain11_fmto-gain11_fit).^2);         % Residual Sum-Of-Squares
gain11_Rsq = 1-SSres/SStot;                      % R^2
fprintf('    R^2: %f\n', gain11_Rsq)

%% Compute the slope ratios
%-- 1-gain difference ratios
gain6t5_rat = gain6_cof(1)/gain5_cof(1);
gain7t6_rat = gain7_cof(1)/gain6_cof(1);
gain8t7_rat = gain8_cof(1)/gain7_cof(1);
gain9t8_rat = gain9_cof(1)/gain8_cof(1);
gain10t9_rat = gain10_cof(1)/gain9_cof(1);
gain11t10_rat = gain11_cof(1)/gain10_cof(1);

fprintf(' -- 1-Gain Ratios -- \n')
fprintf('6/5 ratio:   %f\n', gain6t5_rat)
fprintf('7/6 ratio:   %f\n', gain7t6_rat)
fprintf('8/7 ratio:   %f\n', gain8t7_rat)
fprintf('9/8 ratio:   %f\n', gain9t8_rat)
fprintf('10/9 ratio:  %f\n', gain10t9_rat)

%-- 2-gain difference ratios
gain7t5_rat = gain7_cof(1)/gain5_cof(1);
gain8t6_rat = gain8_cof(1)/gain6_cof(1);
gain9t7_rat = gain9_cof(1)/gain7_cof(1);
gain10t8_rat = gain10_cof(1)/gain8_cof(1);
gain11t9_rat = gain11_cof(1)/gain9_cof(1);

fprintf(' -- 2-Gain Ratios -- \n')
fprintf('7/5 ratio:   %f,  sqrt: %f\n', gain7t5_rat, sqrt(gain7t5_rat))
fprintf('8/6 ratio:   %f,  sqrt: %f\n', gain8t6_rat, sqrt(gain8t6_rat))
fprintf('9/7 ratio:   %f,  sqrt: %f\n', gain9t7_rat, sqrt(gain9t7_rat))
fprintf('10/8 ratio:  %f,  sqrt: %f\n', gain10t8_rat, sqrt(gain10t8_rat))
fprintf('11/9 ratio:  %f,  sqrt: %f\n', gain11t9_rat, sqrt(gain11t9_rat))

%-- 3-gain difference ratios
gain8t5_rat = gain8_cof(1)/gain5_cof(1);
gain9t6_rat = gain9_cof(1)/gain6_cof(1);
gain10t7_rat = gain10_cof(1)/gain7_cof(1);
gain11t8_rat = gain11_cof(1)/gain8_cof(1);

fprintf(' -- 3-Gain Ratios -- \n')
fprintf('8/5 ratio:   %f,   3rt: %f\n', gain8t5_rat, (gain8t5_rat)^(1/3))
fprintf('9/6 ratio:   %f,   3rt: %f\n', gain9t6_rat, (gain9t6_rat)^(1/3))
fprintf('10/7 ratio:  %f,   3rt: %f\n', gain10t7_rat, (gain10t7_rat)^(1/3))
fprintf('11/8 ratio:  %f,   3rt: %f\n', gain11t8_rat, (gain11t8_rat)^(1/3))

%-- 4-gain difference ratios
gain9t5_rat = gain9_cof(1)/gain5_cof(1);
gain10t6_rat = gain10_cof(1)/gain6_cof(1);
gain11t7_rat = gain11_cof(1)/gain7_cof(1);

fprintf(' -- 4-Gain Ratios -- \n')
fprintf('9/5 ratio:   %f,   4rt: %f\n', gain9t5_rat, (gain9t5_rat)^(1/4))
fprintf('10/6 ratio:  %f,   4rt: %f\n', gain10t6_rat, (gain10t6_rat)^(1/4))
fprintf('11/7 ratio:  %f,   4rt: %f\n', gain11t7_rat, (gain11t7_rat)^(1/4))

%-- 5-gain difference ratios
gain10t5_rat = gain10_cof(1)/gain5_cof(1);
gain11t6_rat = gain11_cof(1)/gain6_cof(1);

fprintf(' -- 5-Gain Ratios -- \n')
fprintf('10/5 ratio:  %f,   5rt: %f\n', gain10t5_rat, (gain10t5_rat)^(1/5))
fprintf('11/6 ratio:  %f,   5rt: %f\n', gain11t6_rat, (gain11t6_rat)^(1/5))

%-- 6-gain difference ratios
gain11t5_rat = gain11_cof(1)/gain5_cof(1);

fprintf(' -- 6-Gain Ratios -- \n')
fprintf('11/5 ratio:  %f,   6rt: %f\n', gain11t5_rat, (gain11t5_rat)^(1/6))

%% Compute the Mean, STD, and Errors
% Stack all the ratios into one row vector
gainFact_rats = [[gain6t5_rat, gain7t6_rat, gain8t7_rat, gain9t8_rat, gain10t9_rat, gain11t10_rat] ...
        ([gain7t5_rat, gain8t6_rat, gain9t7_rat, gain10t8_rat, gain11t9_rat]).^(1/2) ...
        ([gain8t5_rat, gain9t6_rat, gain10t7_rat, gain11t8_rat]).^(1/3) ...
        ([gain9t5_rat, gain10t6_rat, gain11t7_rat]).^(1/4) ...
        ([gain10t5_rat, gain11t6_rat]).^(1/5) ...
        ([gain11t5_rat]).^(1/6)];
    
% Compute the mean
gainFact_mean = mean(gainFact_rats);

% Compute the STD
gainFact_std = std(gainFact_rats);

% Compute the fractional error
gainFact_err = gainFact_std/gainFact_mean;

fprintf('____FINAL RESULTS____\n')
fprintf('Average Gain Factor:  %f\n', gainFact_mean)
fprintf('STD in Gain Factor:   %f\n', gainFact_std)
fprintf('Error in Gain Factor: %f [%%]\n', gainFact_err*100)